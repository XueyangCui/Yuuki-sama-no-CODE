---
title: "tidyverse dplyr"
author: "Yuuki"
date: "2023-10-10"
output:
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
library(tidyverse)
```

## dplyr 进行数据操作

```{r, eval=FALSE}
select() # 选择列 
filter()
slice() #筛选行 
arrange()  #对行排序 
mutate() # 修改列/创建新列 
summarize() #汇总
```


### select 函数
#### 选择列，包括对数据框做选择列、调整列序、重命名列。
```{r, eval=FALSE}
df %>% select(name, sex, math) # 或者 select(2, 3, 5)    选择列名进行列选择
```
#### 助手函数    
##### everything(): 选择所有列
##### starts_with(): 以某前缀开头的列名 ends_with(): 以某后缀结尾的列名 contains(): 

用: 选择连续的若干列 
用! 选择变量集合的余集（反选）
& 和 | 选择变量集合的交或并 ,表示 和
c() 合并多个选择

##### where(): 应用一个函数到所有列，选择返回结果为 TRUE 的列，比如与 is.numeric 等函数 连用
```{r, eval=FALSE}
df %>% select(starts_with("m"))
df %>% select(where(is.numeric))  #根据列的数据类型筛选
df[, 4:8] %>% select(where(~ sum(.x, na.rm = TRUE) > 3000)) # purrr风格的函数，计算并且进行TRUE选择
df %>% select(where(~ n_distinct(.x) < 10)) #
```
#### 用 - 删除列
```{r, eval=FALSE}
df %>% select(-c(name, chinese, science)) 
df %>% select(math, everything(), -ends_with("e")) # 经典搭配， everything用于提前某列，最后再删除某些列。
```
#### 移动列的位置顺序
```{r, eval=FALSE}
relocate(.data, ..., .before, .after)    #调整列的顺序函数，指定在啥之前或者之后，其实和直接select效果一样
df %>% relocate(where(is.numeric), .after = name) #指定在name列之后，用select一样可以实现
```
#### 列改名
```{r, eval=FALSE}
df %>% rename(数学 = math, 科学 = science)   #部分改名
```

### across 函数
```{r, eval=FALSE}
across(.cols = everything(), .fns = NULL, ..., .names)
```
#### .cols 为根据选择列语法选定的列范围； 

#### .fns 为应用到选定列上的函数7，它可以是： NULL：不对列作变换； 一个函数，如 mean; 一个 purrr 风格的匿名函数，如 ~ .X * 10 多个函数或匿名函数构成的列表 

#### .names 用来设置输出列的列名样式，默认为 {col}_{fn}

##### across(everything(), .fns): 在所有列范围内，代替后缀 _all across(where(), .fns): 在满足条件的列范围内，代替后缀 _if across(.cols, .fns)：在给定的列范围内，代替后缀 _at

### mutate 函数
#### 用 dplyr 包中的 mutate() 创建或修改列，返回原数据框并增加新列

```{r, eval=FALSE}
df %>% mutate(new_col = 5)     #增加列为同一个数值
df %>% mutate(new_col = 1:n())   #n() 返回当前分组的样本数, 未分组则为总行数。
```

#### 计算新列
```{r, eval=FALSE}
df %>% mutate(total = chinese + math + english + moral + science)  #根据列名进行行值的计算

```
### 此处一定不可以使用sum，mean，这些函数为进行列运算的。

##### 在同一个 mutate() 中可以同时创建或计算多个列，它们是从前往后依次计算，所以可以使用前面 新创建的列，例如
```{r, eval=FALSE}
df %>% mutate(med = median(math, na.rm = TRUE), #计算 df 中 math 列的中位数  
              label = math > med, #创建标记 math 是否大于中位数的逻辑值列
              label = as.numeric(label)) #用 as.numeric() 将 TRUE/FALSE 转化为 1/0
```
#### 修改多列
##### 结合 across() 和选择列语法可以应用函数到多列，从而实现同时修改多列。

##### (1) 应用函数到所有列 
 将所有列转化为字符型：
```{r, eval=FALSE}
df %>% mutate(across(everything(), as.character))
```

##### 应用函数到满足条件的列

```{r, eval=FALSE}
rescale = function(x) { 
  rng = range(x, na.rm = TRUE)      #对range输入向量x
  (x - rng[1]) / (rng[2] - rng[1])   #range函数输出值为最低到最高
}
df %>% mutate(across(where(is.numeric), rescale))
```

##### 应用函数到指定的函数
```{r, eval=FALSE}
as_tibble(iris) %>% 
  mutate(across(contains("Length") | contains("Width"), ~ .x * 10)) 
```
## across函数结合了select函数的功能，并可以进行进一步的处理，但是这里的处理仅仅是列的修改
因为结合了select函数，所以针对选择所有列、选择符合条件（条件筛选）和选择指定的列（后者为前面的包含的特殊情况）。

#### 替换NA，主要函数两个 replace_na fill

##### 实现用某个值替换一列中的所有 NA 值，该函数接受一个命名列表，其成分为 列名 = 替换值：
```{r, eval=FALSE}
starwars %>% 
  replace_na(list(hair_color = "UNKNOWN", 
                  height = mean(.$height, na.rm = TRUE)))  
```

##### 用前一个（或后一个）非缺失值填充 NA。有些表在记录时，会省略与上一条记录相同的内容，如 下表：
```{r, eval=FALSE}
gap_data %>% fill(site, species)
```
##### tidyr 包中的 fill() 适合处理这种结构的缺失值, 默认是向下填充，即用上一个非缺失值填充：

##### 重新编码 if_else，case_when

```{r, eval=FALSE}
df %>% mutate(sex = if_else(sex == " 男", "M", "F"))
df %>% 
  mutate(math = case_when(math >= 75 ~ "High",
                          math >= 60 ~ "Middle",
                          TRUE ~ "Low"))#最后一个分支直接用 TRUE 表示若其他条件都不为 TRUE 时怎么做
```


### 筛选函数 filter
筛选行，即按行选择数据子集，包括过滤行、对行切片、删除行。
```{r, eval=FALSE}
df_dup %>% filter(sex == " 男", math > 80)
df_dup %>% filter(sex == " 女", (is.na(english) | math > 80))  #取并集
df_dup %>% filter(between(math, 70, 80))   # 闭区间
```
##### between()  闭区间， 输出结果为True
用: 选择连续的若干列 
用! 选择变量集合的余集（反选）
& 和 | 选择变量集合的交或并 ,表示 和
c() 合并多个选择

#### if_any if_all 特定筛选
any 存在即可以，all则是要全部满足才可以
```{r, eval=FALSE}
if_any(.cols, .fns, ...)   #fns为判断的条件，输出结果为逻辑判断，结合filter使用
if_all(.cols, .fns, ...)
df %>% filter(if_all(4:6, ~ .x > 75))
df_dup %>% filter(if_all(everything(), ~ !is.na(.x))) #所有值都不是na的  .x为dplyr的函数写法
starwars %>% filter(if_any(everything(), ~ str_detect(.x, "bl")))
df %>% filter(if_any(where(is.numeric), ~ .x > 90))

```

#### 对行切片：slice_*()   ##### n: 用来指定要选择的行数 prop: 用来指定选择的行比例
```{r, eval=FALSE}
slice(df, 3:7) # 选择 3-7 行 
slice_head(df, n, prop) # 从前面开始选择若干行 
slice_tail(df, n, prop) # 从后面开始选择若干行 
slice_min(df, order_by, n, prop) # 根据 order_by 选择最小的若干行 
slice_max(df, order_by, n, prop) # 根据 order_by 选择最大的若干行 
```
```{r, eval=FALSE}
df %>% slice_max(math, n = 5)
```

#### 删除行
##### 用 dplyr 包中的 distinct() 删除重复行（只保留第 1 个，删除其余）。
```{r, eval=FALSE}
df_dup %>% distinct()
df_dup %>% distinct(sex, math, .keep_all = TRUE) # 只根据 sex 和 math 列判定重复
```
注：默认只返回选择的列，要返回所有列，需要设置参数 .keep_all = TRUE。

##### 删除NA行：
drop_na(), 可以利用filter结合if_all选择行去除na
```{r, eval=FALSE}
df_dup %>% drop_na()
df_dup %>% drop_na(sex:math) #只删除某些列中包含NA
df_dup %>% filter(!if_all(where(is.numeric), is.na)) #若要删除某些列都是 NA 的行，借助 if_all() 也很容易实现：
```

#### 对行排序
arrange()
```{r, eval=FALSE}
df_dup %>% arrange(math, sex)
df_dup %>% arrange(-math)

```

### 数据分组（透视表）
##### 对未分组的数据框，一些操作如 mutate() 是在所有行上执行—---或者说，整个数据框是一个分 组，所有行都属于它。 
##### 若数据框被分组，则这些操作是分别在每个分组上独立执行。可以认为是，将数据框拆分为更小的多个数据框。在每个更小的数据框上执行操作，最后再将结果合并回来。

#### 数据分组
```{r, eval=FALSE}
df_grp = df %>% group_by(sex)
ungroup(df_grp) # 解除分组
```
真正将数据框分割为多个分组：group_split(), 返回列表，其每个成分是一个分组数据框 
将数据框分组（group_by），再做嵌套（nest），生成嵌套数据框：group_nest()
```{r, eval=FALSE}
iris %>% group_nest(Species)
iris %>% 
  group_by(Species) %>% 
  group_map(~ head(.x, 2)) # 提取每组的前两个观测
```
group_map(.data, .f, ...): 返回列表 
purrr 风格的分组迭代：将函数 .f 依次应用到分组数据框 .data 的每个分组上
分组是一种强大的数据思维，当您想分组并分别操作（包括汇总）每组数据时，
应该优先采用 group_by() + 操作，而不是分割数据 + 循环迭代。

#### 数据汇总  summary 结果只保留分组列唯一值和新创建的汇总列。
##### 常用的汇总函数
n(): 观测数 
n_distinct(var): 变量 var 的唯一值数目 
sum(var), max(var), min(var), . . . 
mean(var), median(var), sd(var), IQR(var), . . .
```{r, eval=FALSE}
df %>% 
  group_by(sex) %>% 
  summarise(n = n(),
            math_avg = mean(math, na.rm = TRUE), 
            math_med = median(math))   #进行了新创建的汇总列的结果汇总
```

##### 函数 summarise() ，配合 across() 可以对所选择的列做汇总。好处是可以借助辅助选择器或判 断条件选择多列，还能在这些列上执行多个函数，只需要将它们放入一个列表。
本质是通过across的选择以及汇总的功能结合，对group的值或者整体进行一个新的汇总表输出。跟在group后面就是对group汇总，并且对其结果如果进行命名，那么就会多了一个新的结果表
```{r, eval=FALSE}
df %>% 
  group_by(class, sex) %>% 
  summarise(across(contains("h"), mean, na.rm = TRUE))    # na.rm = T
```

```{r, eval=FALSE}
df %>% 
  select(-name) %>% 
  group_by(class, sex) %>% 
  summarise(across(everything(), mean, na.rm = TRUE))
```

```{r, eval=FALSE}
df_grp = df %>% 
  group_by(class) %>% 
  summarise(across(where(is.numeric), 
                   list(sum=sum, mean=mean, min=min),  #同时对一列进行多项汇总
                   na.rm = TRUE)) %>% 
  pivot_longer(-class, names_to = c("Vars", ".value"), names_sep = "_") 
  #改善结果的可读性，一行一个观测

```
list(sum=sum, mean=mean, min=min)指定了要应用的三个函数。
这个列表中，每个函数都被命名了一个别名（sum、mean、min），这些别名将在后续的pivot_longer()函数中被用作新列名的一部分。
在pivot_longer()函数中，names_to = c("Vars", ".value") 将Vars用于存储原始列的名称，而.value用于存储list()函数中的别名（sum、mean、min）。
因此，最终的结果中，Vars列包含了原始列的名称，而.value列包含了对应函数（sum、mean、min）的计算结果。

宽表变长表肯定会增加一个变量列，所以从分割的这列入手理解，那么名字中部分一个作为'vars'成为变量，一个作为'.value'继承结果并且用名字继续当作变量名字，如果需要更换列名字那么直接指定values_from也可以实现。

##### 支持多个值返回结果(此步必然会得到长表)
summarise() 以前只支持一个返回值的汇总函数，如 sum, mean 等。
现在也支持多返回值（返回 向量值、甚至是数据框）的汇总函数，如 range(), quantile() 等。
```{r, eval=FALSE}
qs = c(0.25, 0.5, 0.75) 
df_q = df %>% 
  group_by(sex) %>% 
  summarise(math_qs = quantile(math, qs, na.rm = TRUE), q = qs) 
df_q %>% 
  pivot_wider(names_from = q, values_from = math_qs, names_prefix = "q_")
```
长表变宽表，势必会将某个变量的数值变成列的变量名字，所以需要names_from（将观测的数值变成了变量的名字列），那么新的变量需要数值使用values_from进行指明来自哪些变量列（可以是多个）。

### 多返回值汇总函数如range、quantile这种，一个函数返回多个数值的会产生长表，而list进行多个函数的混合，则会得到宽表。

## 数据重塑
每个变量构成一列 
每个观测构成一行 
每个观测的每个变量值构成一个单元格

#### 宽表的特点是：表比较宽，本来该是 ‘‘值” 的，却出现在 ‘‘变量（名）” 中。 这就需要给它变到 ‘‘值” 中，新起个列名存为一列，这就是所谓的宽表变长表。
```{r, eval=FALSE}
pivot_longer(data, cols, names_to, values_to, values_drop_na, ...)
```
data: 要重塑的数据框 
cols: 用选择列语法选择要变形的列 
names_to: 为存放变形列的列名中的’’ 值’’，指定新列名 
values_to: 为存放变形列中的’’ 值’’，指定新列名 
values_drop_na: 是否忽略变形列中的 NA
names_prefix, names_sep, 名字中的前缀或者间隔。

```{r, eval=FALSE}
family %>% 
  pivot_longer(-family, 
               names_to = c(".value", "child"),   #指定新列名字
               names_sep = "_", 
               values_drop_na = TRUE)
df %>% pivot_longer(everything(), names_to = c(" 队员", ".value"))
df %>% pivot_longer(-地区, names_to = " 年份", values_to = "GDP")                    

```
变形列的列名以 “_” 分割为两部分，用 names_to 指定这两部分的用途：
“.value” 指定第一部分不用管将继续留作列名，并继承原数值，而第二部分，即包含 “child1’’、“child2’’，作为新变量 child 的 ‘‘值” 忽略变形列中的缺失值
因为变成长表，就是列的数量会变化，其中一个用来继承列名字的一部分当变量，另外一个用于保存列数值（名字当做变量名）

#### 长表的特点是：表比较长。 有时候需要将分类变量的若干水平值，变成变量（列名）
```{r, eval=FALSE}
pivot_wider(data, id_cols, names_from, values_from, values_fill, ...)
```
data: 要重塑的数据框 
id_cols: 唯一识别观测的列，默认是除了 names_from 和 values_from 指定列之外的列 
names_from: 指定列名来自哪个变量列 
values_from: 指定列’’ 值’’ 来自哪个变量列
values_fill: 若变宽后单元格值缺失，设置用何值填充
```{r, eval=FALSE}
animals %>% 
  pivot_wider(names_from = Type, values_from = Heads, values_fill = 0)

us_rent_income %>% pivot_wider(names_from = variable, values_from = c(estimate, moe)) #多个值列表
```



